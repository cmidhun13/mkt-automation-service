plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    //Devops code start
    id 'pl.allegro.tech.build.axion-release' version '1.12.0'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
    id 'com.palantir.docker-compose' version '0.22.1'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    //Devops code end
}


group = 'com.szells'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
    manifest {
        attributes 'Main-Class': 'com.szells.marketing.automation.service.MarketingAutomationApplication'
    }
}


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    //devops code start
    jcenter()
    //devops code End
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'org.jeasy:easy-rules-core:3.3.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.1.7.RELEASE'
//    runtimeOnly 'org.postgresql:postgresql'
//    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
//    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
//    runtimeOnly 'org.postgresql:postgresql'
//    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
//    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testCompile('junit:junit:4.12')
    testCompile('io.cucumber:cucumber-junit:2.3.1')
    testCompile('io.cucumber:cucumber-java:2.3.1')
    testCompile('io.cucumber:cucumber-spring:3.0.2')
    testCompile('com.github.tomakehurst:wiremock:2.16.0')
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile "javax.mail:mail:1.4.7"
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
//      craftercms
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: '2.1.3.RELEASE'
    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    compile "org.json:json:20180813"
    compile "com.sun.xml.bind:jaxb-core:2.2.8-b01"
    compile "com.sun.xml.bind:jaxb-impl:2.2-promoted-b65"
    //Devops code starts here
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    //Devops code ends here

//     Keycloak
 //    compile 'org.springframework.boot:spring-boot-starter-security'
   // compile group: 'org.keycloak', name: 'keycloak-spring-boot-starter', version: '6.0.1'
}

test {
    ignoreFailures = true
}
// Devops code start//
String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'cmidhun'
String imageName = "${dockerHubUsernameProperty}/mkt-automation-service:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
    }
}

tasks['sonarqube'].dependsOn test

// Devops code end//